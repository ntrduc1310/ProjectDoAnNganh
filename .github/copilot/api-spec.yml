openapi: 3.0.3
info:
  title: Task Management API
  description: API specification for task management system
  version: 1.0.0

servers:
  - url: http://localhost:8081/api

paths:
  /tasks:
    get:
      summary: Get all tasks
      operationId: getAllTasks
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: Create a new task
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  task:
                    $ref: '#/components/schemas/Task'

  /tasks/{id}:
    get:
      summary: Get task by ID
      operationId: getTaskById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Task object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /tasks/{id}/status:
    put:
      summary: Update task status
      operationId: updateTaskStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: status
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/TaskStatus'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  task:
                    $ref: '#/components/schemas/Task'

  /dashboard/stats:
    get:
      summary: Get dashboard statistics
      operationId: getDashboardStats
      responses:
        '200':
          description: Dashboard statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardStats'

  /tasks/{taskId}/comments:
    get:
      summary: Get comments for a task
      operationId: getCommentsByTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskComment'

  /comments:
    post:
      summary: Create a comment for a task
      operationId: createComment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskComment'

  /health:
    get:
      summary: Check API health
      operationId: checkApiHealth
      responses:
        '200':
          description: API is healthy

components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        priority:
          $ref: '#/components/schemas/TaskPriority'
        status:
          $ref: '#/components/schemas/TaskStatus'
        assigneeEmail:
          type: string
          nullable: true
        assigneeName:
          type: string
          nullable: true
        projectId:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        progress:
          type: number
          nullable: true
        dueDate:
          type: string
          format: date-time
          nullable: true

    TaskPriority:
      type: string
      enum: [LOW, MEDIUM, HIGH, CRITICAL]

    TaskStatus:
      type: string
      enum: [TODO, IN_PROGRESS, IN_REVIEW, COMPLETED, CANCELLED]

    DashboardStats:
      type: object
      properties:
        totalTasks:
          type: integer
        completedTasks:
          type: integer
        inProgressTasks:
          type: integer
        totalProjects:
          type: integer
        teamMembers:
          type: integer

    TaskComment:
      type: object
      properties:
        id:
          type: integer
        content:
          type: string
        userId:
          type: integer
        taskId:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        userFullName:
          type: string
          nullable: true

    CreateTaskRequest:
      type: object
      required:
        - title
        - description
        - priority
        - projectId
      properties:
        title:
          type: string
        description:
          type: string
        priority:
          $ref: '#/components/schemas/TaskPriority'
        projectId:
          type: integer
        assigneeEmail:
          type: string
          nullable: true

    CreateCommentRequest:
      type: object
      required:
        - taskId
        - content
      properties:
        taskId:
          type: integer
        content:
          type: string
