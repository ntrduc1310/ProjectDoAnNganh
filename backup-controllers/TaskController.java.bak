package com.doananganh.backend.controller;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/tasks")
@CrossOrigin(origins = "*")
public class TaskController {
    
    private static final Logger logger = LoggerFactory.getLogger(TaskController.class);

    @GetMapping("/ping")
    public ResponseEntity<String> ping() {
        logger.info("TaskController ping received");
        return ResponseEntity.ok("pong");
    }

    @GetMapping
    public ResponseEntity<List<Map<String, Object>>> getAllTasks() {
        logger.info("TaskController getAllTasks called");
        
        List<Map<String, Object>> tasks = new ArrayList<>();
        
        Map<String, Object> task1 = new HashMap<>();
        task1.put("id", 1L);
        task1.put("title", "Setup Project Structure");
        task1.put("description", "Initialize the project with proper folder structure");
        task1.put("status", "COMPLETED");
        task1.put("priority", "HIGH");
        task1.put("assigneeEmail", "dev@company.com");
        tasks.add(task1);
        
        return ResponseEntity.ok(tasks);
    }

    @PostMapping
    public ResponseEntity<Map<String, Object>> createTask(@RequestBody Map<String, Object> taskData) {
        logger.info("TaskController createTask called with: {}", taskData);
        
        Map<String, Object> newTask = new HashMap<>(taskData);
        newTask.put("id", System.currentTimeMillis());
        newTask.put("createdAt", LocalDateTime.now().toString());
        
        return ResponseEntity.status(HttpStatus.CREATED).body(newTask);
    }
}
